//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TempWebAppMVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StoreOnlineEntities : DbContext
    {
        public StoreOnlineEntities()
            : base("name=StoreOnlineEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<UserCategory> UserCategories { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<Product> TakeListOfProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("TakeListOfProducts");
        }
    
        public virtual ObjectResult<Product> TakeListOfProducts(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("TakeListOfProducts", mergeOption);
        }
    
        public virtual ObjectResult<Product> TakeProductsWithCategory(Nullable<int> category)
        {
            var categoryParameter = category.HasValue ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("TakeProductsWithCategory", categoryParameter);
        }
    
        public virtual ObjectResult<Product> TakeProductsWithCategory(Nullable<int> category, MergeOption mergeOption)
        {
            var categoryParameter = category.HasValue ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("TakeProductsWithCategory", mergeOption, categoryParameter);
        }
    
        public virtual int SearchIfUserExists(string user)
        {
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchIfUserExists", userParameter);
        }
    
        public virtual int InsertUser(string login, string password, string passwordSalt, Nullable<int> adressId)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("passwordSalt", passwordSalt) :
                new ObjectParameter("passwordSalt", typeof(string));
    
            var adressIdParameter = adressId.HasValue ?
                new ObjectParameter("adressId", adressId) :
                new ObjectParameter("adressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUser", loginParameter, passwordParameter, passwordSaltParameter, adressIdParameter);
        }
    }
}
